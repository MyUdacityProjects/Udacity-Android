<resources>
    <string name="app_name">Git Commit Message</string>

    <string name="hello_world">Hello world!</string>
    <string name="finish_tip">Finish</string>
    <string name="intro_msg">5 Useful Tips For A Better Commit Message!</string>
    <string name="why_good_commit_heading">Why good commit messages matter?</string>
    <string name="prev_btn_text">Prev</string>
    <string name="next_btn_text">Next</string>
    <string name="why_good_commit_msg">A well-cared for log is a beautiful and useful thing. git blame, revert, rebase, log, shortlog and other subcommands come to life. Reviewing others\' commits and pull requests becomes something worth doing, and suddenly can be done independently. Understanding why something happpened months or years ago becomes not only possible but efficient.</string>

    <string name="tip_1_header">Limit the subject line to 50 characters</string>
    <string name="tip_1_msg">50 characters is not a hard limit, just a rule of thumb. Keeping subject lines at this length ensures that they are readable, and forces the author to think for a moment about the most concise way to explain what\'s going on.</string>

    <string name="tip_2_header">Separate subject from body with a blank line</string>
    <string name="tip_2_msg">It\'s a good idea to begin the commit message with a single short line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</string>

    <string name="tip_3_header">Use the body to explain what and why vs. how</string>
    <string name="tip_3_msg">In most cases, you can leave out details about how a change has been made. Code is generally self-explanatory in this regard (and if the code is so complex that it needs to be explained in prose, that\'s what source comments are for). Just focus on making clear the reasons you made the change in the first placeâ€”the way things worked before the change (and what was wrong with that), the way they work now, and why you decided to solve it the way you did.</string>

    <string name="tip_4_header">Use the imperative mood in the subject line</string>
    <string name="tip_4_msg">A properly formed git commit subject line should always be able to complete the sentence : If applied, this commit will &lt;your subject line here&gt;</string>

    <string name="tip_5_header">Include a link to the issue/story/card</string>
    <string name="tip_5_msg">Having a story in your git log will make a huge difference in how you and others perceive your project. By taking great care in commit messages, as you do in your code, you will help to increase overall quality. Full urls are more useful than issue numbers, as they are more permanent and avoid confusion over which issue tracker it references.</string>

    <string name="finish_text">That\'s all</string>
    <string name="repo_check_header">Repositories worth checking out :</string>
    <string name="references">References</string>
    <string name="thank_you_text">Thank you for checking out the tips and hope it helps you!</string>
    <string name="action_settings">Settings</string>
</resources>
